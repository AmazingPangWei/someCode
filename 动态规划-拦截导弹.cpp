////某国为了防御敌国的导弹袭击，发展中一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：
////虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于等于前一发的高度。
////某天，雷达捕捉到敌国导弹来袭。由于该系统还在试用阶段，所以只用一套系统，
////因此有可能不能拦截所有的导弹。
////
////输入
////第一行输入测试数据组数N（1 <= N <= 10）
////接下来一行输入这组测试数据共有多少个导弹m（1 <= m <= 20）
////接下来行输入导弹依次飞来的高度，所有高度值均是大于0的正整数。
////输出
////输出最多能拦截的导弹数目
////样例输入
////2
////8
////389 207 155 300 299 170 158 65
////3
////88 34 65
////样例输出
////6
////2
////实质是求递减子序列，可对比LIS
////d(i)=max{0,d(j)}+1
//#include <iostream>
//#include <cstring>
//#include <algorithm>
//using namespace std;
//
//int dp[30];//i结尾的最大炮弹数
//int a[30];
//int n;
//int solve()
//{
//	dp[0] = 1;
//	int MAX = 0;
//	for (int i = 1;i < n;i++)//前i+1个数
//	{
//		dp[i] = 1;
//		for (int j = 0;j < i;j++)
//		{
//			if (a[i] < a[j] && dp[i] < dp[j]+1)//dp[i]<dp[j]+1 防止出现1 6 2 1 7 5 这种情况
//				dp[i] = dp[j] + 1;   
//			if (dp[i] > MAX)
//				MAX = dp[i];
//		}
//	}
//	return MAX;
//}
//
//int main()
//{
//	int m;
//	cin >> m;
//	while (m--)
//	{
//		memset(dp, 0, sizeof(dp));
//		memset(a, 0, sizeof(a));
//		cin >> n;
//		for (int i = 0;i < n;i++)
//			cin >> a[i];
//		cout << solve() << endl;
//	}
//
////	system("pause");
//	return 0;
//}